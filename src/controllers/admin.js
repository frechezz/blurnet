const { PHOTO_IDS } = require("../constants/media");
const messages = require("../constants/messages");
const config = require("../../config");
const api = require("../api");
const logger = require("../utils/logger");
const { getMainKeyboard, getTariffsInlineKeyboard } = require("../keyboards");
const { getTariff, getDefaultTariffName, calculateExpireDate } = require("../constants/tariffs");
const { getUsers } = require("../data/users");

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param {Bot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} tariff - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
 */
async function handleApproval(ctx, bot, userId, tariff) {
  logger.info(
    `–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: userId=${userId}, tariff=${tariff}`,
  );

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π
    const originalCaption = ctx.callbackQuery.message.caption;
    const newCaption = `${originalCaption}\n\n‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${new Date().toLocaleString()}`;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–∞—Ä–∏—Ñ
    if (!tariff || tariff.trim() === "") {
      logger.warn(
        `–ü—É—Å—Ç–æ–π —Ç–∞—Ä–∏—Ñ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
      );
      tariff = getDefaultTariffName();
      logger.info(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${tariff}`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const username = `tg_${userId}_${Math.floor(Math.random() * 1000)}`;
    logger.info(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ API
    let userResponse = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API

    try {
      // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      logger.info(`[AdminController] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      const token = await api.getToken();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      const tariffKey =
        Object.values(require("../constants/tariffs").TARIFFS).find(
          (t) => t.name === tariff,
        )?.key || "tariff_month";

      // –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logger.info(`[AdminController] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariffKey}`);
      const expireDate = calculateExpireDate(tariffKey);
      const userData = {
        username: username,
        telegramId: userId,
        trafficLimitBytes: 0, // –ò–ª–∏ –≤–∑—è—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞—Ä–∏—Ñ–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        trafficLimitStrategy: "NO_RESET", // –ò–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞—Ä–∏—Ñ–∞
        expireAt: expireDate.toISOString(),
        status: "ACTIVE",
        activateAllInbounds: true,
        description: `–¢–∞—Ä–∏—Ñ: ${tariffKey}`,
        // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è API –∏–ª–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
        // subscriptionUuid: null,
        // shortUuid: null,
        // trojanPassword: null,
        // vlessUuid: null,
        // ssPassword: null,
        activeUserInbounds: [], // –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ API —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç
        // createdAt: null,
        // lastTrafficResetAt: null,
        // email: null,
      };

      // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      logger.info(
        `[AdminController] –í—ã–∑–æ–≤ api.createUser –¥–ª—è ${username} —Å —Ç–∞—Ä–∏—Ñ–æ–º: ${tariff}, key=${tariffKey}`,
      );
      userResponse = await api.createUser(token, userData);
      logger.info(`[AdminController] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${userResponse.uuid}`);

    } catch (apiError) {
      logger.error(
        `[AdminController] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API –¥–ª—è ${userId}: ${apiError.message}`,
        apiError.stack
      );
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
      await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –≤ API: ${apiError.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.`);
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API
      return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    }

    // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–∞–µ–º URL –ø–æ–¥–ø–∏—Å–∫–∏
    let subscriptionUrl = userResponse?.subscriptionUrl || "";

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π URL (–∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ)
    if (subscriptionUrl) {
      logger.info(`[AdminController] –ü–æ–ª—É—á–µ–Ω URL –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ API: ${subscriptionUrl}`);
    } else {
      logger.warn(`[AdminController] API –Ω–µ –≤–µ—Ä–Ω—É–ª subscriptionUrl –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}.`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    logger.info(
      `–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} —Å URL: ${subscriptionUrl}`,
    );
    await bot.api.sendPhoto(userId, PHOTO_IDS.payment_success, {
      caption:
        messages.payment.success +
        `\n\nüëÄ <a href='${subscriptionUrl}'>–ü–æ–¥–ø–∏—Å–∫–∞</a>`,
      parse_mode: "HTML",
      reply_markup: getMainKeyboard(),
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.callbackQuery.message.photo || ctx.callbackQuery.message.document) {
      await bot.api.editMessageCaption(
        config.bot.adminId,
        ctx.callbackQuery.message.message_id,
        {
          caption: newCaption,
          reply_markup: { inline_keyboard: [] },
        },
      );
    }

    logger.info(
      `–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleApproval: ${error.message}`);
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param {Bot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} tariff - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
 */
async function handleRejection(ctx, bot, userId, tariff) {
  logger.info(
    `–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: userId=${userId}, tariff=${tariff}`,
  );

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π
    const originalCaption = ctx.callbackQuery.message.caption;
    const newCaption = `${originalCaption}\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${new Date().toLocaleString()}`;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–∞—Ä–∏—Ñ
    if (!tariff || tariff.trim() === "") {
      tariff = getDefaultTariffName();
      logger.info(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${tariff}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    const rejectionMessage = messages.payment.rejected.replace(
      "{tariff}",
      tariff,
    );

    await bot.api.sendPhoto(userId, PHOTO_IDS.payment_rejected, {
      caption: rejectionMessage,
      parse_mode: "HTML",
      reply_markup: getTariffsInlineKeyboard(),
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.callbackQuery.message.photo || ctx.callbackQuery.message.document) {
      await bot.api.editMessageCaption(
        config.bot.adminId,
        ctx.callbackQuery.message.message_id,
        {
          caption: newCaption,
          reply_markup: { inline_keyboard: [] },
        },
      );
    }

    logger.info(
      `–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleRejection: ${error.message}`);
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 */
async function handleGetUsers(ctx) {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    const loadingMsg = await ctx.reply("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö...");

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    const trialUsers = getUsers();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API
    let apiUsers = [];
    try {
      const apiResponse = await api.getAllUsers();

      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
      if (apiResponse && apiResponse.users) {
        apiUsers = apiResponse.users;
        logger.info(`–ü–æ–ª—É—á–µ–Ω–æ ${apiUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API`);
      } else {
        logger.warn("–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
      }
    } catch (apiError) {
      logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ API: ${apiError.message}`,
      );
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</b>\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ API
    if (apiUsers.length > 0) {
      message += `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (${apiUsers.length}):</b>\n\n`;

      for (const user of apiUsers) {
        try {
          const username = user.username || "–ë–µ–∑ –∏–º–µ–Ω–∏";
          const telegramId = user.telegramId || "–ù–µ —É–∫–∞–∑–∞–Ω";
          const status =
            user.status === "ACTIVE" ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω";
          const expireAt = user.expireAt
            ? new Date(user.expireAt).toLocaleDateString()
            : "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ";

          const usedTraffic =
            typeof user.usedTrafficBytes === "number"
              ? (user.usedTrafficBytes / (1024 * 1024 * 1024)).toFixed(2)
              : "0";

          const totalTraffic =
            typeof user.trafficLimitBytes === "number" &&
            user.trafficLimitBytes > 0
              ? (user.trafficLimitBytes / (1024 * 1024 * 1024)).toFixed(2)
              : "‚àû";

          const trafficInfo =
            totalTraffic === "‚àû"
              ? "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
              : `${usedTraffic} GB / ${totalTraffic} GB`;

          message += `üë§ <b>${username}</b> (ID: ${telegramId})\n`;
          message += `üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
          message += `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expireAt}\n`;
          message += `üìà –¢—Ä–∞—Ñ–∏–∫: ${trafficInfo}\n\n`;
        } catch (userError) {
          logger.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userError.message}`,
          );
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        }
      }
    } else {
      message += `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–µ—Ç</b>\n\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
    const trialUserIds = Object.keys(trialUsers);
    if (trialUserIds.length > 0) {
      message += `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º (${trialUserIds.length}):</b>\n\n`;

      for (const [telegramId, userData] of Object.entries(trialUsers)) {
        const username = userData.username || "–ë–µ–∑ –∏–º–µ–Ω–∏";
        const activatedAt = userData.trialActivatedAt
          ? new Date(userData.trialActivatedAt).toLocaleDateString()
          : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

        message += `üë§ ${username} (ID: ${telegramId})\n`;
        message += `üìÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${activatedAt}\n\n`;
      }
    } else {
      message += `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –Ω–µ—Ç</b>\n`;
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    try {
      await ctx.api.deleteMessage(loadingMsg.chat.id, loadingMsg.message_id);
    } catch (deleteError) {
      logger.warn(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ: ${deleteError.message}`,
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (message.length > 4000) {
      const parts = message.match(/.{1,4000}/gs) || [];
      for (const part of parts) {
        await ctx.reply(part, { parse_mode: "HTML" });
      }
    } else {
      await ctx.reply(message, { parse_mode: "HTML" });
    }

    logger.info(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleGetUsers: ${error.message}`);
    await ctx.reply(
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`,
      { parse_mode: "HTML" },
    );
  }
}

module.exports = {
  handleApproval,
  handleRejection,
  handleGetUsers,
};
