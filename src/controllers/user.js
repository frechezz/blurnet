/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
const { PHOTO_IDS } = require("../constants/media");
const messages = require("../constants/messages");
const {
  getMainKeyboard,
  getInstructionInlineKeyboard,
  getTariffsInlineKeyboard,
  getPaymentInlineKeyboard,
  getReturnTariffInlineKeyboard,
} = require("../keyboards");
const { getTariff, calculateExpireDate } = require("../constants/tariffs");
const api = require("../api");
const { hasUsedTrial, markTrialUsed } = require("../data/users");
const logger = require("../utils/logger");
const config = require("../../config");

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 */
async function handleStart(ctx) {
  try {
    await ctx.reply(messages.welcome, {
      parse_mode: "HTML",
      reply_markup: getMainKeyboard(),
    });
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleStart: ${error.message}`);
    await ctx.reply(messages.errors.general);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 */
async function handleInstruction(ctx) {
  try {
    await ctx.replyWithPhoto(PHOTO_IDS.instruction, {
      caption: messages.instruction,
      parse_mode: "HTML",
      reply_markup: getInstructionInlineKeyboard(),
    });
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleInstruction: ${error.message}`);
    await ctx.reply(messages.errors.general);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 */
async function handleStartWork(ctx) {
  try {
    await ctx.replyWithPhoto(PHOTO_IDS.tariffs, {
      caption: messages.tariffs.selection,
      parse_mode: "HTML",
      reply_markup: getTariffsInlineKeyboard(),
    });
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–∞—Ä–∏—Ñ—ã`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleStartWork: ${error.message}`);
    await ctx.reply(messages.errors.general);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 */
async function handleRules(ctx) {
  try {
    await ctx.replyWithPhoto(PHOTO_IDS.rules, {
      caption: messages.rules,
      parse_mode: "HTML",
      reply_markup: getMainKeyboard(),
    });
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleRules: ${error.message}`);
    await ctx.reply(messages.errors.general);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param {string} tariffKey - –ö–ª—é—á –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
 */
async function handleTariffSelection(ctx, tariffKey) {
  try {
    const tariff = getTariff(tariffKey);
    if (!tariff) {
      throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ");
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.tariff = tariff.name;
    const userId = ctx.from.id;

    logger.info(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ: ${tariff.name} (${tariffKey})`,
    );

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if (tariffKey === "tariff_trial") {
      await handleTrialActivation(ctx, userId, tariffKey);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
      await ctx.reply(tariff.message, {
        reply_markup: getPaymentInlineKeyboard(),
      });
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handleTariffSelection: ${error.message}`);
    await ctx.reply(messages.errors.general);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} tariffKey - –ö–ª—é—á —Ç–∞—Ä–∏—Ñ–∞
 */
async function handleTrialActivation(ctx, userId, tariffKey) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–Ω–µ–µ
    if (hasUsedTrial(userId)) {
      logger.info(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥`,
      );
      await ctx.reply(messages.trial.already_used, {
        parse_mode: "HTML",
        reply_markup: getTariffsInlineKeyboard(),
      });
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const username = `tg_${userId}_${Math.floor(Math.random() * 1000)}`;
    logger.info(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

    try {
      // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      logger.info(`[Controller] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      const token = await api.getToken();
      logger.info(`[Controller] –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω`);

      // –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logger.info(`[Controller] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞`);
      const expireDate = calculateExpireDate(tariffKey);
      const userData = {
        username: username,
        telegramId: userId,
        trafficLimitBytes: 0,
        trafficLimitStrategy: "NO_RESET",
        expireAt: expireDate.toISOString(),
        status: "ACTIVE",
        activateAllInbounds: true,
        description: `–¢–∞—Ä–∏—Ñ: ${tariffKey}`,
        activeUserInbounds: [],
      };
      logger.info(`[Controller] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è ${username}`);
      logger.debug(`[Controller] UserData: ${JSON.stringify(userData)}`);

      // –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      logger.info(`[Controller] –í—ã–∑–æ–≤ api.createUser –¥–ª—è ${username}`);
      const userResponse = await api.createUser(token, userData);
      logger.info(`[Controller] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —Å–æ–∑–¥–∞–Ω: ${userResponse?.uuid || 'UUID –Ω–µ –ø–æ–ª—É—á–µ–Ω'}`);

      // –ü–æ–ª—É—á–∞–µ–º URL –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
      let subscriptionUrl = userResponse?.subscriptionUrl;

      // –ï—Å–ª–∏ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ API, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ —Å–∞–º–∏
      if (!subscriptionUrl && userResponse?.uuid) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π UUID (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
        const shortUuid = userResponse.uuid.split('-')[0];
        subscriptionUrl = `${config.urls.subscription}${shortUuid}/singbox`;
        logger.info(`URL –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é: ${subscriptionUrl}`);
      }

      if (subscriptionUrl) {
        logger.info(`–ü–æ–ª—É—á–µ–Ω URL –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionUrl}`);
      } else {
        logger.warn(`API –Ω–µ –≤–µ—Ä–Ω—É–ª subscriptionUrl –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å URL`);
      }

      // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–µ–≥–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      try {
        markTrialUsed(userId, ctx.from.username || `user_${userId}`);
      } catch (markError) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: ${markError.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      try {
        await ctx.reply(
          messages.trial.activated +
            (subscriptionUrl
              ? `\n\nüëÄ <a href='${subscriptionUrl}'>–ü–æ–¥–ø–∏—Å–∫–∞</a>`
              : ""),
          {
            parse_mode: "HTML",
            disable_web_page_preview: true,
            reply_markup: getReturnTariffInlineKeyboard(),
          },
        );
      } catch (replyError) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${replyError.message}`);
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      try {
        const adminMessage = messages.admin.trial_activated
          .replace(
            "{username}",
            ctx.from.username ? "@" + ctx.from.username : "–Ω–µ —É–∫–∞–∑–∞–Ω",
          )
          .replace("{userId}", ctx.from.id);

        await ctx.api.sendMessage(config.bot.adminId, adminMessage);
      } catch (adminMsgError) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ${adminMsgError.message}`);
      }
    } catch (apiError) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–æ —Å—Ç–µ–∫–æ–º –≤—ã–∑–æ–≤–æ–≤
      logger.error(`[Controller] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è ${userId}: ${apiError.message}`, apiError.stack);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        await ctx.reply(messages.trial.error, {
          parse_mode: "HTML",
          reply_markup: getReturnTariffInlineKeyboard(),
        });
      } catch (replyError) {
        logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${replyError.message}`);
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
      try {
        const errorMessage = messages.admin.trial_error
          .replace(
            "{username}",
            ctx.from.username ? "@" + ctx.from.username : "–Ω–µ —É–∫–∞–∑–∞–Ω",
          )
          .replace("{userId}", ctx.from.id)
          .replace("{error}", apiError.message);

        await ctx.api.sendMessage(config.bot.adminId, errorMessage);
      } catch (adminMsgError) {
        logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ${adminMsgError.message}`);
      }
    }
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É —Å–æ —Å—Ç–µ–∫–æ–º –≤—ã–∑–æ–≤–æ–≤
    logger.error(`[Controller] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handleTrialActivation –¥–ª—è ${userId}: ${error.message}`, error.stack);
    try {
      await ctx.reply(messages.errors.general);
    } catch (replyError) {
      logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyError.message}`);
    }
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 */
async function handlePaymentRequest(ctx) {
  try {
    await ctx.reply(messages.payment.send_receipt);
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handlePaymentRequest: ${error.message}`);
    await ctx.reply(messages.errors.general);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 */
async function handlePaymentCancel(ctx) {
  try {
    await handleStartWork(ctx);
    logger.info(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –æ—Ç–º–µ–Ω–∏–ª –ø–ª–∞—Ç–µ–∂ –∏ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤`,
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ handlePaymentCancel: ${error.message}`);
    await ctx.reply(messages.errors.general);
  }
}

module.exports = {
  handleStart,
  handleInstruction,
  handleStartWork,
  handleRules,
  handleTariffSelection,
  handlePaymentRequest,
  handlePaymentCancel,
};
