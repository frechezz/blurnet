const { Bot, session } = require("grammy");
const config = require("../config");
const logger = require("./utils/logger");
const messages = require("./constants/messages");

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const {
  handleStart,
  handleInstruction,
  handleStartWork,
  handleRules,
  handleTariffSelection,
  handlePaymentRequest,
  handlePaymentCancel,
} = require("./controllers/user");

const {
  handleApproval,
  handleRejection,
  handleGetUsers,
} = require("./controllers/admin");

const { handleReceipt, stopInteractiveUpdates } = require("./controllers/payment");


// –ò–º–ø–æ—Ä—Ç middlewares
const { logRequests } = require("./middlewares/logger");
const { adminOnly } = require("./middlewares/auth");

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
const ErrorHandler = require("./utils/error");
const mediaManager = require("./utils/media-manager");
const { updatePhotoIds } = require("./constants/media");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(config.bot.token);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
bot.use(logRequests);

// –°–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(
  session({
    initial: () => ({ 
      tariff: null,
      waitingMessageId: null,
      statusUpdateInterval: null
    }),
  }),
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    stopInteractiveUpdates(ctx);
    await handleStart(ctx);
  } catch (error) {
    await ErrorHandler.handle(ctx, error, "command:start");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command("upload_photos", adminOnly, async (ctx) => {
  try {
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
    await ctx.reply("‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...");
    const fileIds = await mediaManager.uploadAndSaveMediaIds(bot, ctx.from.id);
    updatePhotoIds(fileIds); // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    await ctx.reply("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
  } catch (error) {
    await ErrorHandler.handle(ctx, error, "command:upload_photos");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìë", async (ctx) => {
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopInteractiveUpdates(ctx);
    await handleInstruction(ctx);
  } catch (error) {
    await ErrorHandler.handle(ctx, error, "hears:–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è");
  }
});

bot.hears(
  new RegExp(`–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å ${config.service.name} üöÄ`),
  async (ctx) => {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      stopInteractiveUpdates(ctx);
      await handleStartWork(ctx);
    } catch (error) {
      await ErrorHandler.handle(ctx, error, "hears:–ù–∞—á–∞—Ç—å–†–∞–±–æ—Ç—É");
    }
  },
);

bot.hears("–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", async (ctx) => {
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopInteractiveUpdates(ctx);
    await handleRules(ctx);
  } catch (error) {
    await ErrorHandler.handle(ctx, error, "hears:–ü—Ä–∞–≤–∏–ª–∞");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–æ–∫)
bot.on("callback_query", async (ctx) => {
  try {
    const callbackData = ctx.callbackQuery.data;
    const userId = ctx.from.id;

    try {
      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
      if (callbackData.startsWith("tariff_")) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        stopInteractiveUpdates(ctx);
        await handleTariffSelection(ctx, callbackData);
      } else if (callbackData === "back_main") {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        stopInteractiveUpdates(ctx);
        await ctx.deleteMessage();
        await handleStart(ctx);
      } else if (callbackData === "back_tariffs") {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        stopInteractiveUpdates(ctx);
        await handleStartWork(ctx);
      } else if (callbackData === "payment_success") {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await ctx.answerCallbackQuery({ text: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã...", show_alert: false });
        await handlePaymentRequest(ctx);
      } else if (callbackData === "payment_cancel") {
        await handlePaymentCancel(ctx);
      } else if (
        callbackData.startsWith("approve:") ||
        callbackData.startsWith("reject:")
      ) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (userId !== config.bot.adminId) {
          throw new Error(messages.errors.unauthorized);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await ctx.answerCallbackQuery({ text: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...", show_alert: false });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ":" –≤–º–µ—Å—Ç–æ "_"
        const [action, targetUserId, encodedTariff] = callbackData.split(":");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!encodedTariff) {
          logger.error("–û—à–∏–±–∫–∞: encodedTariff –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!");
          await ctx.answerCallbackQuery({
            text: "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ",
            show_alert: true,
          });
          return;
        }

        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        try {
          const tariff = Buffer.from(encodedTariff, "base64").toString();
          logger.debug(`–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: ${tariff}`);

          if (action === "approve") {
            await handleApproval(ctx, bot, Number(targetUserId), tariff);
            await ctx.answerCallbackQuery({ text: "–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
          } else if (action === "reject") {
            await handleRejection(ctx, bot, Number(targetUserId), tariff);
            await ctx.answerCallbackQuery({ text: "–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω" });
          }
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: ${error.message}`);
          await ctx.answerCallbackQuery({
            text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞—Ä–∏—Ñ–∞",
            show_alert: true,
          });
        }
      }

      // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (!ctx.callbackQuery.answered) {
        await ctx.answerCallbackQuery();
      }
    } catch (innerError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: ${innerError.message}`, innerError.stack);
      try {
        await ErrorHandler.handle(ctx, innerError, "callback_query");
        if (!ctx.callbackQuery.answered) {
          await ctx.answerCallbackQuery({
            text: `–û—à–∏–±–∫–∞: ${innerError.message}`,
            show_alert: true,
          });
        }
      } catch (handlerError) {
        logger.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: ${handlerError.message}`);
        try {
          if (!ctx.callbackQuery.answered) {
            await ctx.answerCallbackQuery({
              text: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`,
              show_alert: true,
            });
          }
        } catch (finalError) {
          logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: ${finalError.message}`);
        }
      }
    }
  } catch (criticalError) {
    logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: ${criticalError.message}`, criticalError.stack);
    try {
      await ctx.answerCallbackQuery({
        text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
        show_alert: true,
      });
    } catch (finalError) {
      logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query: ${finalError.message}`);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (–∫–≤–∏—Ç–∞–Ω—Ü–∏–π)
bot.on(["message:photo", "message:document"], async (ctx) => {
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopInteractiveUpdates(ctx);
    await handleReceipt(ctx);
  } catch (error) {
    await ErrorHandler.handle(ctx, error, "media_handler");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.command("users", adminOnly, async (ctx) => {
  try {
    await handleGetUsers(ctx);
  } catch (error) {
    await ErrorHandler.handle(ctx, error, "command:users");
  }
});

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
 * @returns {Promise<void>}
 */
async function initializeMedia() {
  try {
    logger.info("–ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤...");
    const mediaIds = await mediaManager.getOrUploadMediaIds(bot, config.bot.adminId);
    updatePhotoIds(mediaIds);
    logger.info("–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤: ${error.message}`);
    return false;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:", err);
});

// –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
process.on("SIGINT", () => {
  logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
  process.exit(0);
});

process.on("SIGTERM", () => {
  logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –º–µ–¥–∏–∞
async function startBot() {
  try {
    logger.info(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤...`);
    try {
      await initializeMedia();
    } catch (mediaError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤: ${mediaError.message}`, mediaError.stack);
      logger.warn('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤');
    }
    
    logger.info(`–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${config.service.name}...`);
    try {
      await bot.start({
        drop_pending_updates: true, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∑–∞ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        allowed_updates: ["message", "callback_query"] // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      });
      
      logger.info(`–ë–æ—Ç ${config.service.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);
    } catch (startError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${startError.message}`, startError.stack);
      return false;
    }
    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª–∞—Å—å
  } catch (error) {
    logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${error.message}`, error.stack);
    return false;
  }
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞
module.exports = {
  bot,
  startBot
};