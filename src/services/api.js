const axios = require("axios");
const { COOKIE, USERNAME, PASSWORD } = require("../config");

class RemnavaveAPI {
  constructor() {
    this.baseURL = "https://panel.blurnet.ru";
    this.token = null;
    this.inboundUuid = null;
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
  async login() {
    try {
      const response = await axios.post(
        `${this.baseURL}/api/auth/login`,
        {
          username: USERNAME,
          password: PASSWORD,
        },
        {
          headers: {
            "Content-Type": "application/json",
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –∫—É–∫–∏ –∏–∑ URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            Cookie: COOKIE,
          },
        },
      );

      this.token = response.data.response.accessToken;
      return this.token;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        error.response?.data || error.message,
      );
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ UUID –∏–Ω–±–∞—É–Ω–¥–∞ "Steal"
  async getInboundUuid() {
    if (!this.token) {
      await this.login();
    }

    try {
      const response = await axios.get(`${this.baseURL}/api/inbounds`, {
        headers: {
          Authorization: `Bearer ${this.token}`,
        },
      });

      const inbounds = response.data.response;
      const stealInbound = inbounds.find((inbound) => inbound.tag === "Steal");

      if (!stealInbound) {
        throw new Error('–ò–Ω–±–∞—É–Ω–¥ "Steal" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      this.inboundUuid = stealInbound.uuid;
      return this.inboundUuid;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–±–∞—É–Ω–¥–∞:",
        error.response?.data || error.message,
      );
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–±–∞—É–Ω–¥–µ");
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ç–∞—Ä–∏—Ñ–∞
  async createUser(username, telegramId, tariff) {
    if (!this.token) {
      await this.login();
    }

    if (!this.inboundUuid) {
      await this.getInboundUuid();
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
    const tariffParams = this.getTariffParams(tariff);

    try {
      const response = await axios.post(
        `${this.baseURL}/api/users`,
        {
          username: username,
          telegramId: telegramId,
          trafficLimitBytes: tariffParams.trafficLimitBytes,
          trafficLimitStrategy: "MONTH", // –∏–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
          expireAt: tariffParams.expireAt,
          status: "ACTIVE",
          activateAllInbounds: true, // –ò–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–±–∞—É–Ω–¥ —á–µ—Ä–µ–∑ activeUserInbounds: [this.inboundUuid]
          description: `–¢–∞—Ä–∏—Ñ: ${tariff}`, // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤
        },
        {
          headers: {
            Authorization: `Bearer ${this.token}`,
            "Content-Type": "application/json",
          },
        },
      );

      return response.data.response;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error.response?.data || error.message,
      );
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
  getTariffParams(tariff) {
    console.log("–ü–æ–ª—É—á–µ–Ω —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", tariff); // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    let trafficLimitBytes = 0; // 0 - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
    const now = new Date(); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    let expireAt = new Date(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if (!tariff) {
      console.log(
        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–∞—Ä–∏—Ñ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (1 –º–µ—Å—è—Ü)",
      );
      expireAt.setMonth(now.getMonth() + 1);
      return {
        expireAt: expireAt.toISOString(),
        trafficLimitBytes: trafficLimitBytes,
      };
    }

    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–µ–π—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ "üèÜ12 –º–µ—Å—è—Ü–µ–≤":', tariff === "üèÜ12 –º–µ—Å—è—Ü–µ–≤");
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ "ü•á6 –º–µ—Å—è—Ü–µ–≤":', tariff === "ü•á6 –º–µ—Å—è—Ü–µ–≤");
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ "ü•à3 –º–µ—Å—è—Ü–∞":', tariff === "ü•à3 –º–µ—Å—è—Ü–∞");
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ "ü•â1 –º–µ—Å—è—Ü":', tariff === "ü•â1 –º–µ—Å—è—Ü");
    console.log(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ "üåü –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥":',
      tariff === "üåü –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
    );

    switch (tariff) {
      case "üèÜ12 –º–µ—Å—è—Ü–µ–≤":
        console.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤");
        expireAt.setMonth(now.getMonth() + 12);
        break;
      case "ü•á6 –º–µ—Å—è—Ü–µ–≤":
        console.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤");
        expireAt.setMonth(now.getMonth() + 6);
        break;
      case "ü•à3 –º–µ—Å—è—Ü–∞":
        console.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞");
        expireAt.setMonth(now.getMonth() + 3);
        break;
      case "ü•â1 –º–µ—Å—è—Ü":
        console.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 1 –º–µ—Å—è—Ü");
        expireAt.setMonth(now.getMonth() + 1);
        break;
      case "üåü –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
        console.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π");
        expireAt.setDate(now.getDate() + 5);
        break;
      default:
        console.log("–í—ã–±—Ä–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ª—É—á–∞–π: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 1 –º–µ—Å—è—Ü");
        expireAt.setMonth(now.getMonth() + 1);
    }

    console.log("–ò—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:", expireAt.toISOString());

    return {
      expireAt: expireAt.toISOString(),
      trafficLimitBytes: trafficLimitBytes,
    };
  }
}

module.exports = new RemnavaveAPI();
